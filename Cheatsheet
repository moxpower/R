#R Befehle

#import packages
install.packages("jsonlite")


##import data
#import jsondata:
jd <- jsonlite::fromJSON("https://.../json?address=1699+Amphitheatre+Parkway,+Mountain+View,+CA")
jd$results$address_components[[1]]$long_name
#analyse data
bn = read.csv("https:...csv?accessType=DOWNLOAD")
str(bn)
head(bn)
summary(bn)
summary(bn$First.Name)
dim(bn)


#assign vector
poker_wins <- 
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")

matrix(1:9, byrow=TRUE, nrow  =3)

cbind(matrix1,matrix2) #nebeneinander
rbind(matrix1,matrix2) #untereinander

#vectors can be transformed to factors
# Gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")

# Convert gender_vector to a factor
factor_gender_vector <- factor(gender_vector)

# Select subset in matrix where diameter is smaller than 1
subset(planets_df, diameter < 1)


# Use order() to create positions
positions <-  order(planets_df$diameter)

# Use positions to sort planets_df
planets_df[positions,]

# The workspace
# http://www.statmethods.net/interface/workspace.html

#data frames
fr <- data.frame(c("hi","ho"), c(1,2), c(TRUE,FALSE))






#foreach:

install.packages("foreach")
library(foreach)
foreach(i=1:10) %do%
  rnorm(i)

#for the foreach, we can use parallel computing
install.packages("doParallel")
library(doParallel)

#or cluster computing
cl < makeCluster(4) # from the doParallel
registerDoParallel(cl)

df <- data.frame(ID=c(1,3,4), name=c("Steve","mike","Mary"), c(32,24,52),c(80,90,100))
colnames(df) <- c("ID", "Name", "2013", "2014")
df
df2 <- reshape(df, varying=c("2013","2014"), v.names="Percent", time...)
install.packages("reshape")
library(reshape)

# reshaping
df3 <- melt(df, id=c("ID","Name"))

#merging
mrg <- merge(fr1, fr2, by="ID")

#transpose
carmpg <- mtcars[order(-mtcars$mpg),]
carmpg <- carmpg[1:10,c(1,2,4,6)]
carmpg <- data.frame(t(carmpg))
carmpg$Fiat.128

#aggregate
ag <- aggregate(mtcars$mpg, list(mtcars$hp), mean)

#remove NAs
aq <-na.omit(airquality)
#remove NAs selectively
airquality[complete.cases(airquality[,c(1,3,4,5,6)]),]
#hmisc package
r <- aregImpute(~Ozone + Solar.R + Wind ...)

#slice the df
cut(airquality$Temp, breaks=c(0,80,100,150), labels=c("cold","nice","hot"))

##Data analysis
#modeling functions
lm #linear modeling
glm
aov #analysis of variance

t.test
TukeyHSD #creates sets of confidence intervals
predict

#helper functions for more analysis
coef
residuals
fitted
confint #confidence interval



##Data analysis
#linear modeling
lml <- lm(trees$Volume ~ trees$Height + trees$Girth) #trees$Volume is dependent variable, trees$Height + trees$Girth effects it)
summary(lml)
plot(lml)
lm2 <- lm(mpg ~ cyl + disp + hp + wt, data=mtcars) #instead of mtcars.wt each time

#Variance analysis
boxplot(Speed ~ Expt, data=morley)
a <- aov(Speed ~ Expt, data=morley)
summary(a)

#R Coef Function
lmf <- lm(lv ~lg + trees$Height)
summary(lmf)
x <- coef(lmf)
x

#R Fitted function
lmf <- lm(mpg ~ disp, data=mtcars)
plot(fitted(lmf), residuals(lmf))
abline(h=0) # ususally there is not a line displayed in the plot above

#R residual function
lmf <- lm(mtcars$mpg ~ mtcars$disp)
residuals(lmf)
summary(lmf)
summary(residuals(lmf))
plot(fitted(lmf), residuals(lmf)) #what are the fitted lmfs?
abline(h=0)

#Covariance matrix
lmf <- lm(trees$Volume ~ trees$Girth + trees$Height)
vcov(lmf)

#Confidence interval
plot(faithful$eruptions, faithful$waiting)
lme <- lm(eruptions ~ waiting, data=faithful)
summary(lme)
ci <- confint(lme, level=0.95)

#Generalized linear model
m <- glm(cyl ~ disp + hp, data=mtcars, family=poisson)
params <- data.frame(hp=110, disp=160)
predict(m, params, type="response")

#T Test
r <- rnorm(100, 1000, 100) # (# of items, mean, standard deviation)
tt <- t.test(r, mu=1000)
str(tt)

#TukeyHSD Test
a <- aov(Speed ~ factor(Expt), data=morley)
TukeyHSD(a)
boxplot(Speed ~ Expt, data=morley)
plot(TukeyHSD(a))

#Predict Function
plot(eruptions ~ waiting, data=faithful)
lme <- lm(eruptions ~ waiting, data=faithful)
dfe <- data.frame(waiting=50)
predict(lme, dfe, interval="predict", level=0.95)

#Time Series
tsdata <- ts(sample(1:100, 24), start=c(2013,1), end=c(2014,12), frequency=12, deltat=1/12)
str(tsdata)
f <- stl(AirPassengers, s.window="period")
library(forecast)
f <- ets(AirPassengers)
plot(forecast(f,12))
f <- auto.arima(AirPassengers)




#plots
library(ggplot2)
qplot(eruptions, waiting, data=faithful, color=waiting, size=eruptions, geom=c("point","smooth"), method="lm")
